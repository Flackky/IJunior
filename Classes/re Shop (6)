using System;
using System.Collections.Generic;

namespace Sixth_part
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string PlayerInventoryCheckAction = "1";
            const string VendorInventoryCheckAction = "2";
            const string PurchaseAction = "3";
            const string ExitAction = "4";

            string playerInventoryCheckMessage = PlayerInventoryCheckAction + " - Посмотреть инвентарь игрока\n";
            string vendorInventoryCheckMessage = VendorInventoryCheckAction + " - Посмотреть каталог продовца\n";
            string PurchaseMessage = PurchaseAction + " - Купить предметы продовца\n";
            string exitMessage = ExitAction + " - выход";
            bool isWorking = true;

            List<Item> playerItems = new List<Item>();
            Inventory playerInventory = new Inventory(playerItems);
            Player player = new Player("Игрок", 10000, playerInventory);

            List<Item> vendorItems = new List<Item>();
            vendorItems.Add(new Item("Картина", 4000));
            vendorItems.Add(new Item("Зеркало", 3500));
            vendorItems.Add(new Item("Шкаф", 8500));
            Inventory vendorInventory = new Inventory(vendorItems);
            Vendor vendor = new Vendor("Продавец", 0, vendorInventory);

            while (isWorking)
            {
                player.ShowInfo();
                vendor.ShowInfo();

                Console.Write($"\nМеню:\n{playerInventoryCheckMessage}{vendorInventoryCheckMessage}{PurchaseMessage}{exitMessage}\n-> ");

                switch (Console.ReadLine())
                {
                    case PlayerInventoryCheckAction:
                        player.ShowInventory();
                        break;
                    case VendorInventoryCheckAction:
                        vendor.ShowInventory();
                        break;
                    case PurchaseAction:
                        player.BuyItem(vendor);
                        break;
                    case ExitAction:
                        isWorking = false;
                        break;
                    default:
                        Console.WriteLine("Неизвестная команда.");
                        Console.ReadKey();
                        Console.Clear();
                        break;
                }
            }
        }
    }

    class Character
    {
        protected Inventory Inventory;

        public string Name { get; protected set; }
        public int Money { get; protected set; }

        public Character(string name, int money, Inventory inventory)
        {
            Name = name;
            Money = money;
            Inventory = inventory;
        }

        public void ShowInventory()
        {
            Inventory.ShowItems();
        }

        public virtual void ShowInfo()
        {
            Console.Write($"Имя - {Name};");
        }
    }

    class Player : Character
    {
        public Player(string name, int money, Inventory inventory) : base(name, money, inventory) { }

        public void PayMoney(int itemPrice)
        {
            Money -= itemPrice;
        }

        public void BuyItem(Vendor vendor)
        {
            Item requiredItem = vendor.Get();

            if (requiredItem != null && Money - requiredItem.Price >= 0)
            {
                PayMoney(requiredItem.Price);
                vendor.ReceiveMoney(requiredItem.Price);
                vendor.SellItem(requiredItem);
                Inventory.AddItem(requiredItem);
                Console.Write("Предмет куплен и помещён в ваш инвентарь.");
            }
            else
            {
                Console.Write("Ошибка: предмет не существует или его нет в продаже либо у вас не достаточно средств.");
            }

            Console.ReadKey();
            Console.Clear();
        }
        
        public override void ShowInfo()
        {
            Console.Write("Игрок ");
            base.ShowInfo();
            Console.Write($" Деньги - {Money}.");
        }
    }

    class Vendor : Character
    {
        public Vendor(string name, int money, Inventory inventory) : base(name, money, inventory) { }

        public Item Get()
        {
            return Inventory.GetItem();
        }

        public void ReceiveMoney(int itemPrice)
        {
            Money += itemPrice;
        }

        public void SellItem(Item requiredItem)
        {
            Inventory.RemoveItem(requiredItem);
        }

        public override void ShowInfo()
        {
            Console.Write(" >>>> Продавец ");
            base.ShowInfo();
            Console.Write($" Деньги - {Money}.");
        }
    }

    class Item
    {
        public string Name { get; private set; }
        public int Price { get; private set; }

        public Item(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Предмет - {Name}, Стоимость - {Price}.");
        }
    }

    class Inventory
    {
        private List<Item> _items;

        public Inventory(List<Item> items)
        {
            _items = items;
        }

        public void ShowItems()
        {
            for (int i = 0; i < _items.Count; i++)
            {
                _items[i].ShowInfo();
            }

            Console.ReadKey();
            Console.Clear();
        }

        public Item GetItem()
        {
            Console.Write("Введите название предмета, который вы хотите купить: ");
            string itemName = Console.ReadLine();

            foreach (Item item in _items)
            {
                if (itemName.ToLower() == item.Name.ToLower())
                {
                    return item;
                }
            }

            return null;
        }

        public void AddItem(Item item)
        {
            _items.Add(item);
        }

        public void RemoveItem(Item item)
        {
            _items.Remove(item);
        }
    }
}
