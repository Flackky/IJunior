using System;
using System.Collections.Generic;

namespace Sixth_part 
{
    internal class Program
    {
        static void Main(string[] args)
        {
            bool isWorking = true;

            while (isWorking)
            {
                Fighter[] blueFighters = { new Paladin(), new Warrior(), new DarkKnight(), new GunBreaker(), new Reaper() };
                Fighter[] redFighters = { new Paladin(), new Warrior(), new DarkKnight(), new GunBreaker(), new Reaper() };

                for (int i = 0; i < blueFighters.Length; i++)
                {                   
                    Console.Write("№" + (i+1) + " - ");
                    blueFighters[i].ShowInfo();
                    Console.WriteLine();
                }

                Console.Write("Введите номер участника, который будет находиться в КРАСНОЙ команде -> ");
                bool isRedCorrect = ReadNumber(Console.ReadLine(), out int redFighterIndex);
                Console.Write("Введите номер участника, который будет находиться в СИНЕЙ команде -> ");
                bool isBlueCorrect = ReadNumber(Console.ReadLine(), out int blueFighterIndex);
                
                if (isBlueCorrect && isRedCorrect)
                {
                    Fighter redFighter = redFighters[redFighterIndex - 1];
                    Fighter blueFighter = blueFighters[blueFighterIndex - 1];

                    while (redFighter.Health > 0 && blueFighter.Health > 0)
                    {
                        Console.WriteLine();
                        blueFighter.TakeDamage(redFighter.DealDamage());
                        Console.WriteLine();
                        Console.ForegroundColor = ConsoleColor.Red;
                        redFighter.ShowBattleIntel();
                        redFighter.TakeDamage(blueFighter.DealDamage());
                        Console.ForegroundColor = ConsoleColor.Blue;
                        blueFighter.ShowBattleIntel();
                    }

                    Console.ForegroundColor = ConsoleColor.White;
                    Console.WriteLine();

                    if (redFighter.Health <= 0 && blueFighter.Health <= 0)
                    {
                        Console.Write("Оба бойца погибли");
                    }
                    else if (redFighter.Health <= 0)
                    {
                        Console.Write($"Победил синий {blueFighter.ClassName}");
                    }
                    else if (blueFighter.Health <= 0)
                    {
                        Console.Write($"Победил красный {redFighter.ClassName}");
                    }
                }
                else
                {
                    Console.Write("\nВ выборе участника была совершена ошибка. Повторите попытку.");
                }
               
                Console.ReadLine();
                Console.Clear();
            }
        }

        public static bool ReadNumber(string unconvertedNumber, out int convertedNumber)
        {
            if (Int32.TryParse(unconvertedNumber, out convertedNumber) && convertedNumber > 0 && convertedNumber <= 5)
            {
                return true;
            }
            else
            {
                Console.WriteLine("Неверный формат записи.");
            }

            return false;
        }
    }

    class Fighter
    {
        protected int ResultDamage;
        protected Random Random = new Random();

        public string ClassName { get; protected set; }
        public int Health { get; protected set; }
        public int Damage { get; protected set; }
        public int Resistance { get; protected set; }

        public Fighter(string className, int health, int damage, int resistance)
        {
            ClassName = className;
            Health = health;
            Damage = damage;
            Resistance = resistance;
        }
        public void ShowBattleIntel()
        {
            Console.WriteLine($"|{ClassName}| ОЗ: {Health}, Нанёс: {ResultDamage} урона");
        }

        public virtual int DealDamage()
        {
            ResultDamage = Damage;
            return ResultDamage;
        }

        public virtual void TakeDamage(int damage)
        {
            Health -= damage - Resistance;
        }

        public virtual void ShowInfo()
        {
            Console.WriteLine($"{ClassName}, ОЗ: {Health}, Атака: {Damage}, Защита: {Resistance};");
            Console.ForegroundColor = ConsoleColor.Green;
        }       
    }

    class Paladin : Fighter
    {   
        private int _shieldResistance;

        public Paladin() : base ("Паладин", 1000, 100, 60)
        {
            _shieldResistance = 40;
        }

        public override int DealDamage()
        {
            return base.DealDamage();
        }

        public override void TakeDamage(int damage)
        {
            int perCent = Random.Next(0, 100);

            if (perCent < 60)
                Health -= damage - Resistance - _shieldResistance;
            else
                Health -= damage - Resistance;
        }

        public override void ShowInfo()
        {
            base.ShowInfo();
            Console.WriteLine("Навык - Несломленная крепость: Имеет щит, который с 60 % шансом может дополнительно заблокировать некоторый входящий урон.");
            Console.ForegroundColor = ConsoleColor.White;
        }
    }

    class Warrior : Fighter 
    {
        private bool _isRaged = false;

        public Warrior() : base("Воин", 900, 120, 35) { }

        public override int DealDamage()
        {
            int perCent = Random.Next(0, 100);

            if (perCent < 40)
            {
                _isRaged = true;
                ResultDamage = Damage * 2;
                return ResultDamage;
            }
            else
            {
                return base.DealDamage();
            }
        }

        public override void TakeDamage(int damage)
        {
            if (_isRaged)
            {
                _isRaged = false;
                Health -= damage;
            } 
            else
            {
                Health -= damage - Resistance;
            }           
        }

        public override void ShowInfo()
        {
            base.ShowInfo();
            Console.WriteLine("Навык - Ярость воина: С 40% шансом удваивает свой урон, но остаётся без защиты.");
            Console.ForegroundColor = ConsoleColor.White;
        }
    }

    class DarkKnight : Fighter
    {
        private int _tempDamage = 0;

        public DarkKnight() : base("Тёмный рыцарь", 850, 110, 40) { }

        public override int DealDamage()
        {
            ResultDamage = Damage + _tempDamage;
            return ResultDamage;
        }

        public override void TakeDamage(int damage)
        {
            int perCent = Random.Next(0, 100);

            if (perCent < 35)
            {
                _tempDamage = damage / 2;
                Health -= damage / 2 - Resistance;
            }
            else
            {
                _tempDamage = 0;
                Health -= damage - Resistance;
            }
        }

        public override void ShowInfo()
        {
            base.ShowInfo();
            Console.WriteLine("Навык - За собой во тьму: C 35% шансом разделяет полученный урон. Половину принимает, а другую половину отражает во врага на след. ходу.");
            Console.ForegroundColor = ConsoleColor.White;
        }
    }
    
    class GunBreaker : Fighter
    {
        public int GunBladeCounter { get; private set; }

        public GunBreaker() : base("Ганбрейкер", 750, 140, 35) { }

        public override int DealDamage()
        {
            int perCent = Random.Next(0, 100);

            if (perCent < 20)
            {
                Health += Damage * 50 / 100;
            }

            return base.DealDamage();
        }

        public override void TakeDamage(int damage)
        {
            base.TakeDamage(damage);
        }

        public override void ShowInfo()
        {
            base.ShowInfo();
            Console.WriteLine("Навык - Эфирная нить: С 20% шансом поглощает эфир оставленный после своей атаки в виде HP (Количеством равным 50% от нанесённого урона).");
            Console.ForegroundColor = ConsoleColor.White;
        }
    }

    class Reaper : Fighter
    {
        public int HealingMultiplier { get; private set; }

        public Reaper() : base("Жнец", 540, 220, 15) { }

        public override int DealDamage()
        {
            return base.DealDamage();
        }

        public override void TakeDamage(int damage)
        {
            int perCent = Random.Next(0, 100);

            Health -= damage - Resistance;

            if (perCent < 30)
            {
                Health += damage * 40 / 100;
            }
        }

        public override void ShowInfo()
        {
            base.ShowInfo();
            Console.WriteLine("Навык - Пожиная плоды: C 30% шансом лечит себя при получении урона (количеством HP 40% от полученного урона).");
            Console.ForegroundColor = ConsoleColor.White;
        }
    }
}
