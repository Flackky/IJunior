using System;
using System.Collections.Generic;

namespace Sixth_part
{
    internal class Program
    {
        static void Main(string[] args)
        {
            bool isWorking = true;
            bool isCreatingTrip = false;
            List<Direction> cities = new List<Direction> { new Direction("Краснодар"), new Direction("Новороссийск"), new Direction("Москва"), new Direction("Санкт-Петербург"), new Direction("Казань") };
            List<Car> cars = new List<Car>();
            List<Train> sentTrains = new List<Train>();
            Configurator configurator = new Configurator(cities, cars, sentTrains);            

            while (isWorking)
            {
                for (int i = 0; i < sentTrains.Count; i++)
                {
                    Console.Write((i + 1) + " - ");
                    sentTrains[i].ShowTripInfo(i);
                }           

                Console.SetCursorPosition(0, sentTrains.Count + 1);
                Console.WriteLine("Создать новый рейс?\n1 - Да\n2 - Нет");

                switch(Console.ReadLine())
                {
                    case "1":
                        isCreatingTrip = true;
                        break;
                    case "2":
                        isCreatingTrip = false;
                        isWorking = false;
                        break;
                }

                if (isCreatingTrip)
                {
                    Console.Clear();
                    configurator.CreateDirection();                         
                    Train train = configurator.CreateTrain(); 
                    configurator.SendTrain(train);
                }

                Console.Clear();
            }
        }      
    }

    class Configurator
    {
        private Random random = new Random();
        private List<Direction> _cities;
        private List<Car> _cars;
        private List<Train> _trains;
        private string _trip;
        private int _passangers;

        public Configurator(List<Direction> cities, List<Car> cars, List<Train> trains)
        {
            _cities = cities;
            _cars = cars;
            _trains = trains;
        }

        public void ShowList()
        {
            for (int i = 0; i < _cities.Count; i++)
            {
                Console.Write("№" + (i + 1) + " - ");
                _cities[i].ShowInfo();
                Console.WriteLine();
            }
        }

        public void CreateDirection()
        {
            int minDirectionIndex = 0;
            bool isCorrectDirection = false;

            while (isCorrectDirection == false)
            {
                Console.WriteLine("План поезда: Создание направления.");
                ShowList();

                Console.WriteLine("Выберите номер города откуда поедет поезд.");
                bool isCorrectInput = ReadNumber(Console.ReadLine(), out int cityDepartureIndex);

                if (isCorrectInput)
                {
                    Console.WriteLine("Выберите город куда приедет поезд.");
                    isCorrectInput = ReadNumber(Console.ReadLine(), out int cityArrivalIndex);

                    if (isCorrectInput && cityDepartureIndex != cityArrivalIndex && cityArrivalIndex > minDirectionIndex && cityArrivalIndex <= _cities.Count && cityDepartureIndex > minDirectionIndex && cityDepartureIndex <= _cities.Count)
                    {
                        _trip = $"{_cities[cityDepartureIndex - 1].City} - {_cities[cityArrivalIndex - 1].City}";
                        Console.WriteLine(_trip);
                        isCorrectDirection = true;
                    }
                    else
                    {
                        Console.WriteLine("Ошибка. Город отправления совпадает с городом прибытия.");
                        Console.ReadKey();
                        Console.Clear();
                    }
                }   
            }
        }

        public int SellTickets()
        {
            int passengerCount = random.Next(50, 200);
            return passengerCount;
        }

        public Train CreateTrain()
        {
            Console.ReadKey();
            Console.Clear();
            Console.WriteLine("План поезда: Формирование поезда.");

            _passangers = SellTickets();

            int numberOfSeats = 0;
            int smallCarCount = 0;
            int largeCarCount = 0;
            SmallCar smallCar = new SmallCar();
            LargeCar largeCar = new LargeCar();
            _cars.Clear();

            Console.WriteLine($"Количество оформленных билетов: {_passangers}");

            while (numberOfSeats < _passangers)
            {
                if (numberOfSeats + largeCar.Capacity < _passangers)
                {
                    numberOfSeats += largeCar.Capacity;
                    _cars.Add(new LargeCar());
                    largeCarCount++;
                }
                else
                {
                    if (numberOfSeats + smallCar.Capacity < _passangers)
                    {
                        numberOfSeats += largeCar.Capacity;
                        _cars.Add(new LargeCar());
                        largeCarCount++;
                    }
                    else
                    {
                        numberOfSeats += smallCar.Capacity;
                        _cars.Add(new SmallCar());
                        smallCarCount++;
                    }
                }
            }

            Train train = new Train(_trip, _passangers, _cars);
            Console.WriteLine($"Необходимое количество вагонов: {_cars.Count} на {numberOfSeats} мест\nБольших вагонов на {largeCar.Capacity} мест: {largeCarCount}\nМаленьких вагонов на {smallCar.Capacity} мест: {smallCarCount}.");
            return train;
        }

        public Train SendTrain(Train train)
        {
            Console.ReadKey();
            Console.Clear();
            Console.WriteLine("План поезда: Отправление поезда.");

            bool isDecided = false;
            Console.WriteLine("Отправить поезд?\n1 - Да\n2 - Нет");
            bool isCorrectInput = ReadNumber(Console.ReadLine(), out int Index);

            while (isDecided == false)
            {
                if (isCorrectInput && Index == 1)
                {
                    _trains.Add(train);
                }
                else if (isCorrectInput && Index == 2)
                {
                    Console.WriteLine("Поезд не был отправлен.");
                    isDecided = true;
                }
            }

            return null;
        }

        public bool ReadNumber(string unconvertedNumber, out int convertedNumber)
        {
            if (Int32.TryParse(unconvertedNumber, out convertedNumber))
            {
                return true;
            }
            else
            {
                Console.WriteLine("Неверный формат записи.");
                Console.ReadKey();
                Console.Clear();
            }

            return false;
        }
    }

    class Direction
    {
        public string City { get; private set; }

        public Direction(string city)
        {
            City = city;
        }

        public void ShowInfo()
        {
            Console.WriteLine(City);
        }
    }

    class Train
    {
        private string _trip;
        private int _passangers;
        private List<Car> _cars;

        public Train(string trip, int passangers, List<Car> cars)
        {
            _trip = trip;
            _passangers = passangers;
            _cars = cars;
        }

        public void ShowTripInfo(int index)
        {
            Console.WriteLine($"Рейс {_trip}, {_passangers} пассажиров, {_cars.Count} вагонов - В пути.");
        }
    }

    class Car
    {
        public int Capacity { get; protected set; }

        public Car(int capacity)
        {
            Capacity = capacity;
        }
    }

    class SmallCar : Car
    {
        public SmallCar() : base(18) { }
    }

    class LargeCar : Car
    {
        public LargeCar() : base(33) { }
    }
}
