using System;
using System.IO;

namespace Second_part
{
    internal class Program
    {            
        static void Main(string[] args)
        {
            char[,] map =
            {
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ','#'},
                {'#',' ',' ','B',' ',' ',' ',' ',' ',' ','B',' ',' ',' ',' ','^'},
                {'#',' ',' ','#',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ','#'},
                {'#',' ','#','#','#','#',' ','#','#','#','#','#','#','#','#','#'},
                {'#',' ','E',' ','#',' ',' ',' ','#','C','#','#',' ',' ','C','#'},
                {'#',' ','#','C','#',' ','#',' ','#',' ',' ','E',' ','#','#','#'},
                {'#',' ','#','#','#',' ','#','E','#','E','#','#',' ','#','C','#'},
                {'#',' ',' ',' ','#',' ','#',' ','#',' ',' ','E',' ',' ','C','#'},
                {'#','C',' ',' ','#','C','#','C',' ',' ','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}
            };

            char symbol = ' ';
            int playerHealth = 90000;
            int maxPlayerHealth = 90000;
            int playerMana = 10000;
            int maxPlayerMana = 10000;
            int amountOfPotions = 25;
            int amountOfEthers = 5;
            int chestPotions = 5;

            int playerPositionX = 1;
            int playerPositionY = 1;
            int playerDirectionX;
            int playerDirectionY;
            bool isPlaying = true;
            bool isOnMap = true;
            bool isCorrectSymbol;

            DrawMap(map);
            Console.SetCursorPosition(0, 12);
            ShowPlayerInfo(playerHealth, maxPlayerHealth, playerMana, maxPlayerMana, amountOfPotions, amountOfEthers, isOnMap);

            while (isPlaying)
            {
                isCorrectSymbol = false;
                Console.SetCursorPosition(playerPositionY, playerPositionX);
                Console.ForegroundColor = ConsoleColor.Blue;
                Console.WriteLine('P');

                if (Console.KeyAvailable)
                {
                    ConsoleKeyInfo key = Console.ReadKey(true);
                    ChangeDirection(key, out playerDirectionX, out playerDirectionY);
                    symbol = map[playerPositionX + playerDirectionX, playerPositionY + playerDirectionY];

                    if (map[playerPositionX + playerDirectionX, playerPositionY + playerDirectionY] != '#')
                    {
                        Move(ref map, ref playerPositionX, ref playerPositionY, playerDirectionX, playerDirectionY);
                        isCorrectSymbol = true;
                    }

                    if (isCorrectSymbol)
                    {
                        if (map[playerPositionX, playerPositionY] == 'E' || map[playerPositionX, playerPositionY] == 'B')
                        {
                            isPlaying = StartBattle(symbol, ref playerHealth, ref maxPlayerHealth, playerMana, maxPlayerMana, ref amountOfPotions, ref amountOfEthers);
                            DrawMap(map);
                            ShowPlayerInfo(playerHealth, maxPlayerHealth, playerMana, maxPlayerMana, amountOfPotions, amountOfEthers, isOnMap);
                        }
                        else if (map[playerPositionX, playerPositionY] == 'C')
                        {
                            AddPotions(chestPotions, ref amountOfPotions);
                            DrawMap(map);
                            ShowPlayerInfo(playerHealth, maxPlayerHealth, playerMana, maxPlayerMana, amountOfPotions, amountOfEthers, isOnMap);
                        }
                        else if (map[playerPositionX, playerPositionY] == '^')
                        {
                            isPlaying = ShowVictoryMessage(isPlaying);
                        }
                    }                   
                }             
            }
        }

        static void DrawMap(char[,] map)
        {
            Console.CursorVisible = false;

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    switch (map[i, j])
                    {
                        case 'B':
                            Console.ForegroundColor = ConsoleColor.Red;
                            break;
                        case 'E':
                            Console.ForegroundColor = ConsoleColor.Yellow;
                            break;
                        case 'C':
                            Console.ForegroundColor = ConsoleColor.Cyan;
                            break;
                        default:
                            Console.ForegroundColor = ConsoleColor.White;
                            break;
                    }

                    Console.Write(map[i, j]);
                }
                Console.WriteLine();
            }
        }

        static void Move(ref char[,] map, ref int moveX, ref int moveY, int moveDirectionX, int moveDirectionY)
        {
            Console.SetCursorPosition(moveY, moveX);
            Console.Write(' ');
            map[moveX, moveY] = ' ';

            moveX += moveDirectionX;
            moveY += moveDirectionY;

            Console.SetCursorPosition(moveY, moveX);
            Console.Write('P');
        }

        static void ChangeDirection(ConsoleKeyInfo key, out int moveDirectionX, out int moveDirectionY)
        {
            moveDirectionX = 0;
            moveDirectionY = 0;

            switch (key.Key)
            {
                case ConsoleKey.UpArrow:
                    moveDirectionX = -1;
                    break;
                case ConsoleKey.DownArrow:
                    moveDirectionX = 1;
                    break;
                case ConsoleKey.LeftArrow:
                    moveDirectionY = -1;
                    break;
                case ConsoleKey.RightArrow:
                    moveDirectionY = 1;
                    break;
            }
        }       

        static void AddPotions(int chestPotions, ref int amountOfPotions)
        {
            Console.Clear();
            Console.Write($"Вы нашли {chestPotions} зелий в сундуке.");
            amountOfPotions += chestPotions;
            Console.ReadKey();
            Console.Clear();
        }

        static void DefineEnemy(char symbol, ref string enemyName, ref int enemyHealth, ref int maxEnemyHealth, ref int damageMultiplier)
        {
            if (symbol == 'B')
            {
                enemyHealth = 1000000;
                maxEnemyHealth = 1000000;
                enemyName = "Высший страж (Босс)";
                damageMultiplier = 2;
            }
            else if (symbol == 'E')
            {
                enemyHealth = 500000;
                maxEnemyHealth = 500000;
                enemyName = "Страж (Враг)";
                damageMultiplier = 1;
            }
        }

        static void ShowPlayerInfo(int health, int maxHealth, int mana, int maxMana, int amountOfPotions = 0, int amountOfEthers = 0, bool isOnMap = false)
        {
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.Write("Чёрный маг (Игрок) ");
            Console.ForegroundColor = ConsoleColor.Green;
            Console.Write($"HP: {health} / {maxHealth}, ");
            Console.ForegroundColor = ConsoleColor.Magenta;
            Console.Write($"MP: {mana} / {maxMana}");

            if (isOnMap)
            {
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine($"\nЗелья: {amountOfPotions}, Эфир: {amountOfEthers}.");
                Console.ForegroundColor = ConsoleColor.White;
                Console.WriteLine("\nОбозначения: E - обычные враги, B - сильные враги, C - сундуки, ^ - выход из подземелья.");
            }
        }

        static void ShowBattleIntel(char symbol, string enemyName, int enemyHealth, int maxEnemyHealth, int finalPlayerDamage, int finalEnemyDamage, int healthDivider)
        {           
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.Write(" |> > > >| ");

            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write(enemyName);
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($" HP: {enemyHealth} / {maxEnemyHealth}\n");

            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("ИНФОРМАЦИЯ О БОЕ:");
            Console.WriteLine($"ИГРОК >>>> {finalPlayerDamage} >>>> ВРАГ");
            Console.Write($"ИГРОК <<<< {finalEnemyDamage} <<<< ВРАГ");

            if (enemyHealth <= maxEnemyHealth / healthDivider && symbol == 'B')
            {
                Console.WriteLine(" (УРОН x2!)\n");
            }
            else
            {
                Console.WriteLine("\n");
            }
        }      

        static void DealDamage(ref int finalDamage, int attack, int attackPotency, ref int enemyHealth, ref int mana, ref bool isInputCorrect, int effectPotency = 1)
        {
            finalDamage = attack * attackPotency * effectPotency;
            enemyHealth -= finalDamage;
            mana -= attackPotency;
            isInputCorrect = true;
        }

        static bool AttackEnemy(string userInput, ref int mana, int attackPotency, int effectPotency, bool isManaEnough, ref bool isAttackEffectActive, ref bool isAnotherAttackEffectActive, ref int finalPlayerDamage, int playerAttack, ref int enemyHealth, bool isInputCorrect)
        {
            bool isStarterAttack = false;
            bool isUltimateAttack = false;

            switch (userInput)
            {
                case "1":
                case "3":
                    isStarterAttack = true;
                    break;
                case "ice":
                case "fire":
                    isUltimateAttack = true;
                    break;
            }

            if (mana - attackPotency < 0)
            {
                Console.WriteLine("Не хватает маны.");
                isManaEnough = false;
            }

            if (isManaEnough)
            {
                if (isAnotherAttackEffectActive)
                {
                    isAnotherAttackEffectActive = false;
                }

                switch (isAttackEffectActive)
                {
                    case false:
                        if (isUltimateAttack)
                        {
                            Console.WriteLine("Для атаки необходим определённый эффект.");
                        }
                        else if (isStarterAttack)
                        {
                            DealDamage(ref finalPlayerDamage, playerAttack, attackPotency, ref enemyHealth, ref mana, ref isInputCorrect);
                            isAttackEffectActive = true;
                        }                       
                        else
                        {
                            DealDamage(ref finalPlayerDamage, playerAttack, attackPotency, ref enemyHealth, ref mana, ref isInputCorrect);
                        }
                        break;
                    case true:
                        if (isUltimateAttack)
                        {
                            DealDamage(ref finalPlayerDamage, playerAttack, attackPotency, ref enemyHealth, ref mana, ref isInputCorrect, effectPotency);
                            isAttackEffectActive = false;
                        }
                        else
                        {
                            DealDamage(ref finalPlayerDamage, playerAttack, attackPotency, ref enemyHealth, ref mana, ref isInputCorrect, effectPotency);
                        }
                        break;
                }    
            } 

            return isInputCorrect;
        }

        static bool UseItem(ref int amountOfItems, ref int playerTrait, int maxPlayerTrait, int itemRecover, bool isInputCorrect)
        {
            if (amountOfItems > 0)
            {
                CheckExcess(ref playerTrait, itemRecover, maxPlayerTrait);

                amountOfItems--;
                isInputCorrect = true;
            }
            else
            {
                Console.WriteLine("Предмет закончился");
            }

            return isInputCorrect;
        }

        static bool UseAbility(bool isUsingAbility)
        {
            if (isUsingAbility)
            {
                Console.WriteLine($"Способность Защита используется или КД ещё не прошло");
            }
            else
            {
                isUsingAbility = true;
            }

            return isUsingAbility;
        }

        static int CheckAbility(ref bool isUsingAbility, ref int abilityCount, int abilityCountStart, ref int abilityCountDown, int abilityCountDownStart, ref int mana, int maxMana, int abilityPotency, string abilityIndicator, int finalEnemyDamage = 0, int damageMultiplier = 0)
        {
            bool isAbility = true;

            if (isUsingAbility)
            {
                if (abilityCount > 0)
                {
                    if (abilityIndicator == "dream")
                    {
                        abilityCount = CheckExcess(ref mana, abilityPotency, maxMana, isAbility, abilityCount);
                    }
                    else if (abilityIndicator == "ward")
                    {
                        finalEnemyDamage /= damageMultiplier;
                        abilityCount--;
                    }
                }
                else if (abilityCountDown > 1)
                {
                    abilityCountDown--;
                }
                else
                {
                    isUsingAbility = false;
                    abilityCount = abilityCountStart;
                    abilityCountDown = abilityCountDownStart;
                }
            }

            return finalEnemyDamage;
        }

        static int CheckExcess(ref int playerTrait, int recover, int maxPlayerTrait, bool isAbility = false, int abilityCount = 0)
        {
            if (playerTrait + recover > maxPlayerTrait)
            {
                playerTrait = maxPlayerTrait;
            }
            else
            {
                playerTrait += recover;
            }

            if (isAbility)
            {
                abilityCount--;
            }

            return abilityCount;
        }

        static bool StartBattle(char symbol, ref int playerHealth, ref int maxPlayerHealth, int playerMana, int maxPlayerMana, ref int amountOfPotions, ref int amountOfEthers)
        {
            Random random = new Random();
            string userInput = "";
            bool isInputCorrect = false;

            bool isManaEnough = true;
            string enemyName = "?";
            int enemyHealth = 0;
            int maxEnemyHealth = 0;
            int healthDivider = 2;
            bool isPlayerAlive = true;
            bool isEnemyAlive = true;
            int finalPlayerDamage = 0;
            int finalEnemyDamage = 0;

            int playerAttackMinimum = 5;
            int playerAttackMaximum = 10;
            int playerAttack;

            int potencyOfIce1 = 1000;
            int potencyOfIce2 = 3300;
            int potencyOfFlare = 6000;
            int potencyOfFire1 = 1600;
            int potencyOfFire2 = 4200;
            int potencyOfDespair = 8000;

            string dreamingIndicator = "dream";
            bool isUsingDreaming = false;
            int dreaming = 4000;
            int dreamingCount = 3;
            int dreamingCountStart = 3;
            int dreamingCountDown = 1;
            int dreamingCountDownStart = 1;

            string manawardIndicator = "ward";
            bool isUsingManaward = false;
            int manaward = 2;
            int manawardCount = 3;
            int manawardCountStart = 3;
            int manawardCountDown = 3;
            int manawardCountDownStart = 3;

            bool isIceEffectActive = false;
            int iceMinimum = 1;
            int iceMaximum = 4;
            int iceEffect = random.Next(iceMinimum, iceMaximum);

            bool isFireEffectActive = false;
            int fireMinimum = 2;
            int fireMaximum = 5;
            int fireEffect = random.Next(fireMinimum, fireMaximum);

            int potionRecover = 45000;
            int etherRecover = 3000;

            int damageMultiplier = 1;
            int enemyAttackPotency = 3000;
            int enemyAttackMinimum = 5;
            int enemyAttackMaximum = 10;
            int enemyAttack;

            Console.Clear();
            DefineEnemy(symbol, ref enemyName, ref enemyHealth, ref maxEnemyHealth, ref damageMultiplier);

            while (isPlayerAlive && isEnemyAlive)
            {
                isInputCorrect = false;

                CheckAbility(ref isUsingDreaming, ref dreamingCount, dreamingCountStart, ref dreamingCountDown, dreamingCountDownStart, ref playerMana, maxPlayerMana, dreaming, dreamingIndicator);
                ShowPlayerInfo(playerHealth, maxPlayerHealth, playerMana, maxPlayerMana);
                ShowBattleIntel(symbol, enemyName, enemyHealth, maxEnemyHealth, finalPlayerDamage, finalEnemyDamage, healthDivider);

                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("ТАКТИЧЕСКОЕ МЕНЮ:\nskip - Пропустить ход.");
                Console.ForegroundColor = ConsoleColor.DarkRed;
                Console.WriteLine($"\n    АТАКА:\n1 - Лёд I: {potencyOfIce1} MP (+Ледяной эффект I)\n2 - Лёд II: {potencyOfIce2} MP (!Комбо при наличии ледяного эффекта)\nice - Вспышка: {potencyOfFlare} MP (!Необходим Ледяной эффект)\n3 - Огонь I: {potencyOfFire1} MP (+Огненный эффект I)\n4 - Огонь II: {potencyOfFire2} MP (!Комбо при наличии огненного эффекта)\nfire - Отчаяние: {potencyOfDespair} MP (!Необходим Огненный эффект)\n");

                Console.ForegroundColor = ConsoleColor.DarkGreen;
                Console.WriteLine($"    ПРЕДМЕТЫ:\npn - Зелье (Восстанавливает {potionRecover} здоровья). Осталось: {amountOfPotions}\ner - Эфир (Восстанавливает {etherRecover} маны). Осталось: {amountOfEthers}\n");

                Console.ForegroundColor = ConsoleColor.DarkBlue;
                Console.WriteLine($"    ЗАЩИТА/ВОССТАНОВЛЕНИЕ (При использовании ход не будет завершён.):\ndg - Сновидения (Восстанавливает {dreaming} маны/ход. Действует {dreamingCountStart} хода. КД {dreamingCountDownStart} ход.)\nmd - Защита (Уменьшает входящий урон в {manaward} раза. Действует {manawardCountStart} хода. КД {manawardCountDownStart} хода.)\n");

                Console.ForegroundColor = ConsoleColor.DarkGray;
                Console.WriteLine("НАЛОЖЕННЫЕ ЭФФЕКТЫ:");

                if (isIceEffectActive)
                {
                    Console.WriteLine("+Ледяной эффект");
                }

                if (isFireEffectActive)
                {
                    Console.WriteLine("+Огненный эффект");
                }

                if (isUsingDreaming && dreamingCount > 0)
                {
                    Console.WriteLine($"+Сновидения. Осталось {dreamingCount} ход(а).");
                }
                else if (isUsingDreaming && dreamingCount <= 0)
                {
                    Console.WriteLine($"-Сновидения. КД: осталось {dreamingCountDown} ход(а).");
                }

                if (isUsingManaward && manawardCount > 0)
                {
                    Console.WriteLine($"+Защита. Осталось {manawardCount} ход(а).");
                }
                else if (isUsingManaward && manawardCount <= 0)
                {
                    Console.WriteLine($"-Защита. КД: Осталось {manawardCountDown} ход(а).");
                }

                while (isInputCorrect == false)
                {
                    isManaEnough = true;
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.Write("\n>>>> ");
                    userInput = Console.ReadLine();
                    playerAttack = random.Next(playerAttackMinimum, playerAttackMaximum);

                    switch (userInput)
                    {
                        case "pn":
                            isInputCorrect = UseItem(ref amountOfPotions, ref playerHealth, maxPlayerHealth ,potionRecover, isInputCorrect);
                            break;
                        case "er":
                            isInputCorrect = UseItem(ref amountOfEthers, ref playerMana, maxPlayerMana, etherRecover, isInputCorrect);
                            break;
                        case "md":
                            isUsingManaward = UseAbility(isUsingManaward);
                            break;
                        case "dg":
                            isUsingDreaming = UseAbility(isUsingDreaming);
                            break;
                        case "1":
                            isInputCorrect = AttackEnemy(userInput, ref playerMana, potencyOfIce1, iceEffect, isManaEnough, ref isIceEffectActive, ref isFireEffectActive, ref finalPlayerDamage, playerAttack, ref enemyHealth, isInputCorrect);
                            break;
                        case "2":
                            isInputCorrect = AttackEnemy(userInput, ref playerMana, potencyOfIce2, iceEffect, isManaEnough, ref isIceEffectActive, ref isFireEffectActive, ref finalPlayerDamage, playerAttack, ref enemyHealth, isInputCorrect);
                            break;                        
                        case "ice":
                            isInputCorrect = AttackEnemy(userInput, ref playerMana, potencyOfFlare, iceEffect, isManaEnough, ref isIceEffectActive, ref isFireEffectActive, ref finalPlayerDamage, playerAttack, ref enemyHealth, isInputCorrect);
                            break;
                        case "3":
                            isInputCorrect = AttackEnemy(userInput, ref playerMana, potencyOfFire1, fireEffect, isManaEnough, ref isFireEffectActive, ref isIceEffectActive, ref finalPlayerDamage, playerAttack, ref enemyHealth, isInputCorrect);
                            break;
                        case "4":
                            isInputCorrect = AttackEnemy(userInput, ref playerMana, potencyOfFire2, fireEffect, isManaEnough, ref isFireEffectActive, ref isIceEffectActive, ref finalPlayerDamage, playerAttack, ref enemyHealth, isInputCorrect);
                            break;
                        case "fire":
                            isInputCorrect = AttackEnemy(userInput, ref playerMana, potencyOfDespair, fireEffect, isManaEnough, ref isFireEffectActive, ref isIceEffectActive, ref finalPlayerDamage, playerAttack, ref enemyHealth, isInputCorrect);
                            break;
                        case "skip":
                            isInputCorrect = true;
                            break;
                        default:
                            Console.WriteLine("Команда не распознана.");
                            break;
                    }
                }

                enemyAttack = random.Next(enemyAttackMinimum, enemyAttackMaximum);

                if (enemyHealth >= maxEnemyHealth / healthDivider)
                {
                    finalEnemyDamage = enemyAttack * enemyAttackPotency;
                }
                else
                {
                    finalEnemyDamage = enemyAttack * enemyAttackPotency * damageMultiplier;
                }

                finalEnemyDamage = CheckAbility(ref isUsingManaward, ref manawardCount, manawardCountStart, ref manawardCountDown, manawardCountDownStart, ref playerMana, maxPlayerMana, manaward, manawardIndicator, finalEnemyDamage, damageMultiplier);
                playerHealth -= finalEnemyDamage;

                if (playerHealth <= 0)
                {
                    isPlayerAlive = false;
                }
                if (enemyHealth <= 0)
                {
                    isEnemyAlive = false;
                }

                Console.Clear();
            }

            if (isPlayerAlive == false && isEnemyAlive == false)
            {
                Console.WriteLine("Вы и враг погибли.");
            }
            else if (isPlayerAlive == false)
            {
                Console.WriteLine("Вы пали в бою.");
            }
            else
            {
                Console.WriteLine("Победа! Враг повержен.");
            }

            Console.ReadKey();
            Console.Clear();
            return isPlayerAlive;
        }      

        static bool ShowVictoryMessage(bool isPlaying)
        {
            Console.Clear();
            Console.WriteLine("Поздравляем! Вы потеряли 10 минут своей жизни и прошли игру!");
            Console.ReadKey();
            isPlaying = false;
            return isPlaying;
        }
    }
}
